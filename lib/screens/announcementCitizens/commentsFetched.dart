import 'package:flutter/material.dart';
import 'package:nashra_project2/models/announcement.dart';
import 'package:nashra_project2/models/citizen.dart';
import 'package:nashra_project2/models/comment.dart';
import 'package:nashra_project2/providers/announcementsProvider.dart';
import 'package:nashra_project2/providers/authProvider.dart';
import 'package:provider/provider.dart';

class Commentsfetched extends StatefulWidget {
  final Announcement announcement;

  const Commentsfetched({super.key, required this.announcement});

  @override
  State<Commentsfetched> createState() => _CommentsfetchedState();
}

class _CommentsfetchedState extends State<Commentsfetched> {
  late Future<void> announcementsFuture;
  final TextEditingController _commentController = TextEditingController();
  bool _isPostingComment = false;

  @override
  void initState() {
    super.initState();
    _loadComments();
  }

  void _loadComments() {
    final auth = Provider.of<AuthProvider>(context, listen: false);
    final announcementsProvider =
        Provider.of<Announcementsprovider>(context, listen: false);
    announcementsFuture = announcementsProvider.fetchCommentsForAnnouncement(
        widget.announcement.id, auth.token);
  }

  Future<void> _postComment() async {
    if (_commentController.text.isEmpty) return;

    setState(() {
      _isPostingComment = true;
    });

    try {
      final auth = Provider.of<AuthProvider>(context, listen: false);
      final announcementsProvider =
          Provider.of<Announcementsprovider>(context, listen: false);

      final newComment = Comment(
        id: '', // Will be generated by Firebase
        userId: auth.userId!,
        content: _commentController.text,
        anonymous: false, // You can add a switch for this if needed
        createdAt: DateTime.now(),
      );

      await announcementsProvider.addCommentToAnnouncement(
          widget.announcement.id, newComment, auth.token);

      // Refresh comments
      await announcementsProvider.fetchCommentsForAnnouncement(
          widget.announcement.id, auth.token);

      _commentController.clear();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to post comment: ${e.toString()}')),
      );
    } finally {
      setState(() {
        _isPostingComment = false;
      });
    }
  }

  @override
  void dispose() {
    _commentController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color:  Color(0xFFFEFFF3),
        borderRadius: BorderRadius.circular(12.0),
      ),
      padding: const EdgeInsets.all(16),
      child: Column(
       
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Comments',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
          const SizedBox(height: 10),
        
          // Comments list
          Expanded(
           
            child: FutureBuilder(
              future: announcementsFuture,
              builder: (ctx, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return Center(
                      child: Text('Error loading comments: ${snapshot.error}'));
                } else {
                  final comments = widget.announcement.comments;
                  if (comments.isEmpty) {
                    return const Center(
                      child: Text(
                        'No comments yet. Be the first to comment!',
                        style: TextStyle(color: Colors.grey),
                      ),
                    );
                  }
                  return ListView.builder(
                    shrinkWrap: true,
                  //   physics: const NeverScrollableScrollPhysics(),
                    itemCount: comments.length,
                    itemBuilder: (ctx, index) {
                      return Card(
                        margin: const EdgeInsets.symmetric(vertical: 4),
                        color: Color(0xFFFEFFF3),
                        child: ListTile(
                          title: Text(comments[index].content),
                          subtitle: Text(
                            comments[index].createdAt.toString(),
                            style: const TextStyle(fontSize: 12),
                          ),
                          // You can add more details like user name if available
                        ),
                        
                      );
                    },
                  );
                }
              },
            ),
          ),
            // Comment input field
          Row(
            children: [
              Expanded(
                child: TextField(
                  controller: _commentController,
                  decoration: InputDecoration(
                    hintText: 'Write a comment...',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    contentPadding: const EdgeInsets.symmetric(
                      vertical: 10,
                      horizontal: 16,
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 8),
              _isPostingComment
                  ? const CircularProgressIndicator()
                  : IconButton(
                      icon: const Icon(Icons.send, color: Color.fromARGB(255, 79, 181, 97)),
                      onPressed: _postComment,
                    ),
            ],
          ),
          const SizedBox(height: 16),
        ],
      ),
    );
  }
}