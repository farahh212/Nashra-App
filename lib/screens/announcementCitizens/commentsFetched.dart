import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:nashra_project2/models/announcement.dart';
import 'package:nashra_project2/models/comment.dart';
import 'package:nashra_project2/providers/announcementsProvider.dart';
import 'package:nashra_project2/providers/authProvider.dart';
import 'package:provider/provider.dart';

class CommentsFetched extends StatefulWidget {
  final Announcement announcement;

  const CommentsFetched({super.key, required this.announcement});

  @override
  State<CommentsFetched> createState() => _CommentsFetchedState();
}

class _CommentsFetchedState extends State<CommentsFetched> {
  final TextEditingController _commentController = TextEditingController();
  bool _isPostingComment = false;
  bool isAnonymous = false;

  @override
  void initState() {
    super.initState();
    _loadComments();
  }

  void _loadComments() {
    final auth = Provider.of<AuthProvider>(context, listen: false);
    final announcementsProvider =
        Provider.of<Announcementsprovider>(context, listen: false);
    announcementsProvider.fetchCommentsForAnnouncement(
        widget.announcement.id, auth.token);
  }

  Future<String?> getDisplayNameByUid(String uid) async {
    final doc = await FirebaseFirestore.instance.collection('users').doc(uid).get();
    if (doc.exists) {
      return doc.data()?['name'];
    }
    return null;
  }

  Future<void> _postComment() async {
    if (_commentController.text.isEmpty) return;

    setState(() {
      _isPostingComment = true;
    });

    try {
      final auth = Provider.of<AuthProvider>(context, listen: false);
      final announcementsProvider =
          Provider.of<Announcementsprovider>(context, listen: false);

      String? displayName;

      if (!isAnonymous) {
        displayName = await getDisplayNameByUid(auth.userId!);
      } else {
        displayName = 'Anonymous';
      }

      final newComment = Comment(
        id: '', // Will be generated by Firebase
        userId: auth.userId!,
        name: displayName,
        content: _commentController.text,
        anonymous: isAnonymous,
        createdAt: DateTime.now(),
      );

      await announcementsProvider.addCommentToAnnouncement(
          widget.announcement.id, newComment, auth.token);

      // Refresh comments after posting
      await announcementsProvider.fetchCommentsForAnnouncement(
          widget.announcement.id, auth.token);

      _commentController.clear();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to post comment: ${e.toString()}')),
      );
    } finally {
      setState(() {
        _isPostingComment = false;
      });
    }
  }

  @override
  void dispose() {
    _commentController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
     final auth = Provider.of<AuthProvider>(context, listen: false);
    final isAdmin = auth.isAdmin;
    return Container(
      decoration: BoxDecoration(
        color: const Color(0xFFFEFFF3),
        borderRadius: BorderRadius.circular(12.0),
      ),
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Comments',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
          const SizedBox(height: 10),

          // Comments list
          Expanded(
            child: Consumer<Announcementsprovider>(
              builder: (ctx, announcementsProvider, _) {
                final announcement =
                    announcementsProvider.announcements.firstWhere(
                  (a) => a.id == widget.announcement.id,
                  orElse: () => widget.announcement,
                );

                final comments = announcement.comments;

                if (comments.isEmpty) {
                  return const Center(
                    child: Text(
                      'No comments yet. Be the first to comment!',
                      style: TextStyle(color: Colors.grey),
                    ),
                  );
                }

                return ListView.builder(
                  shrinkWrap: true,
                  itemCount: comments.length,
                  itemBuilder: (ctx, index) {
                    final comment = comments[index];
                    return Card(
                      margin: const EdgeInsets.symmetric(vertical: 4),
                      color: const Color(0xFFFEFFF3),
                      child: ListTile(
                        title: Text(comment.name ?? 'Government'),
                        subtitle: Text(comment.content),
                        // Optionally add timestamp here
                      ),
                    );
                  },
                );
              },
            ),
          ),
  SizedBox(height:10),
        if(!isAdmin)
          Row(
            children: [
              GestureDetector(
                onTap: () {
                  setState(() {
                    isAnonymous = !isAnonymous;
                  });
                },
                child: Container(
                  width: 20,
                  height: 20,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(color: Colors.blue, width: 2),
                    color: isAnonymous ? Colors.blue : Colors.transparent,
                  ),
                ),
              ),
              const SizedBox(width: 8),
              const Text("Anonymous"),
            ],
          ),
            SizedBox(height:10),

          // Comment input field
          Row(
            children: [
              Expanded(
                child: TextField(
                  controller: _commentController,
                  decoration: InputDecoration(
                    hintText: 'Write a comment...',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    contentPadding: const EdgeInsets.symmetric(
                      vertical: 10,
                      horizontal: 16,
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 8),
              _isPostingComment
                  ? const CircularProgressIndicator()
                  : IconButton(
                      icon: const Icon(Icons.send,
                          color: Color.fromARGB(255, 79, 181, 97)),
                      onPressed: _postComment,
                    ),
            ],
          ),
          const SizedBox(height: 16),
        ],
      ),
    );
  }
}
